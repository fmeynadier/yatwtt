#!/usr/bin/env python3
""" Taskwarrior Timetracking Tweaker

(c) F. Meynadier Frederic.Meynadier@gmail.com
"""

__version__="0.1"

import subprocess
import argparse
import datetime
import pytz
import json

# Set local timezone
local = pytz.timezone('Europe/Paris')

# For use with yatwtt (https://github.com/fmeynadier/yatwtt) hook
# Time stored in UTC
TIME_FORMAT = '%Y%m%dT%H%M%SZ'
UDA_KEY = 'timetracking'


class Tttweak():
    def __init__(self, task_id):
        self.t_id = task_id
        self.task_cmd = "task"
        self.json = json.loads(str(subprocess.check_output([self.task_cmd,
                                                            "export",
                                                            self.t_id]),
                                   encoding="utf8"))[0]
        self.ranges = []


    def load_ranges(self):
        """ Loads timetracking data from the json that has been stored upon
        initialisation """
        try:
            str_ranges = self.json[UDA_KEY].split(";")
        except KeyError:
            str_ranges = ""
        for str_rng in str_ranges:
            if str_rng != "":
                str_start, str_stop = str_rng.split('-')
                # dt_stop may be None
                dt_stop = datetime.datetime.strptime(str_stop, TIME_FORMAT)
                dt_start = datetime.datetime.strptime(str_start, TIME_FORMAT)

                # Time is stored in UTC -> make python aware of this
                self.ranges.append({"start": pytz.utc.localize(dt_start),
                                    "stop": pytz.utc.localize(dt_stop)})

    def save_ranges(self, debug):
        """ Writes the new ranges into the database
        """
        tt_uda = ""
        for rng in self.ranges:
            tt_uda += rng["start"].strftime(TIME_FORMAT) + "-"
            if rng["stop"]:
                tt_uda += rng["stop"].strftime(TIME_FORMAT) + ";"

        if debug:
            print("TaskWarrior arguments : " + tt_uda)
        else:
                subprocess.call([self.task_cmd,
                                 self.t_id,
                                 "modify",
                                 "{}:\"{}\"".format(UDA_KEY, tt_uda)
                                ])


    def ls(self):
        """List all present ranges, print them (converted to local time)
        and give an ID to each
        """
        rng_id = len(self.ranges)
        for rng in self.ranges:
            if rng["stop"]:
                print("{} : {} -> {} ({})".format(
                    rng_id, 
                    rng["start"].astimezone(local).isoformat(), 
                    rng["stop"].isoformat(),
                    str(rng["stop"] - rng["start"]),
                ))
            else:
                # rng["stop"] is None, so task is active
                now = datetime.datetime.now().replace(microsecond=0)
                print("{} : {} -> now ({})".format(
                    rng_id,
                    rng["start"].isoformat(),
                    str(now - rng["start"]),
                ))
            rng_id-=1   

    def wait_cmd(self):
        cmd = input("cmd :")

        now = datetime.datetime.now().replace(microsecond=0)

        if cmd.split()[0] in ["help", "h"]:
            # Print list of commands
            print("(h)elp / (d)elete [id] / (w)orked [# hours]")
        elif cmd.split()[0] in ["d", "del", "delete"]:
            # Remove designated range from the list
            del self.ranges[-int(cmd.split()[1])]
        elif cmd.split()[0] in ["w", "worked"]:
            # Add a new range : from N hours ago to now
            self.ranges.append(
                {"start": now - datetime.timedelta(hours=int(cmd.split()[1])),
                "stop": now})
        elif cmd.split()[0] in ["quit", "q", "exit", "e"]:
            # Exit 
            pass





if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        "Tweak time tracking in taskwarrior")
    parser.add_argument("task_id", type=str, 
                        help="Taskwarrior task ID")
    parser.add_argument("-d", "--debug", action="store_true", 
            help="write UDA to stdout instead of writing it to database")
    parser.add_argument("-v","--version", action="version",
                        version="{version}".format(version=__version__))

    args = parser.parse_args()
    ttw = Tttweak(args.task_id)
    ttw.load_ranges()
    ttw.ls()
    ttw.wait_cmd()
    ttw.save_ranges(args.debug)
